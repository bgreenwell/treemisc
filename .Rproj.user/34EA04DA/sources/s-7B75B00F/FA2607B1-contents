# Error message to display when training data cannot be extracted form object
msg <- paste0(
  "The training data could not be extracted from object. Please supply the ",
  "raw training data using the `train` argument in the call to `partial()`."
)


#' @keywords internal
where <- function(name, env = parent.frame()) {
  if (identical(env, emptyenv())) {
    stop("Can't find ", name, ".", call. = FALSE)
  } else if (exists(name, envir = env, inherits = FALSE)) {
    env
  } else {
    where(name, parent.env(env))
  }
}


#' @keywords internal
get_training_data <- function(object) {
  UseMethod("get_training_data")
}


#' @keywords internal
get_training_data.default <- function(object, env = parent.frame()) {

  # Grab the call
  mcall <- tryCatch(stats::getCall(object), error = function(e) {
    stop(msg, call. = FALSE)
  })

  # Make sure all of the arguments are specified by their full names
  f <- eval(mcall[[1L]], envir = env)
  if (!is.primitive(f)) {
    mcall <- match.call(f, call = mcall)
  }

  # Grab the data component
  n <- 1
  while(length(env) != 0) {
    train <- tryCatch(eval(mcall$data, envir = env), error = function(e) {
      NULL
    })
    if (!is.null(train) || identical(env, globalenv())) {
      break
    }
    env <- parent.frame(n)  # inspect calling environment
    n <- n + 1
  }
  if (is.null(train)) {
    stop(msg, call. = FALSE)
  } else {
    if (!(is.data.frame(train))) {
      if (is.matrix(train) || is.list(train)) {
        train <- as.data.frame(train)
      } else {
        stop(msg, call. = FALSE)
      }
    }
  }

  train

}
#' #' @keywords internal
#' get_training_data.default <- function(object) {
#'   if (isS4(object)) {
#'     stop(msg, call. = FALSE)
#'   } else {
#'     train <- eval(stats::getCall(object)$data)
#'     if (is.null(train)) {
#'       stop(msg, call. = FALSE)
#'     } else {
#'       if (!(is.data.frame(train))) {
#'         if (is.matrix(train) || is.list(train)) {
#'           train <- as.data.frame(train)
#'         } else {
#'           stop(msg, call. = FALSE)
#'         }
#'       }
#'     }
#'   }
#'   train
#' }


#' @keywords internal
get_training_data.BinaryTree <- function(object) {
  object@data@get("input")
}


#' @keywords internal
get_training_data.cforest <- function(object) {
  stop(msg, call. = FALSE)
}


#' @keywords internal
get_training_data.ctree <- function(object) {
  stop(msg, call. = FALSE)
}


#' @keywords internal
get_training_data.RandomForest <- function(object) {
  object@data@get("input")
}


#' @keywords internal
get_training_data.train <- function(object) {
  # By default, "train" object have a copy of the training data stored in
  # a components called "trainingData"
  train <- object$trainingData
  if (is.null(train)) {
    stop(msg, call. = FALSE)
  }
  train$.outcome <- NULL  # remove .outcome column
  train
}
